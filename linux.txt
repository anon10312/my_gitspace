__USERS AND GROUPS__

adduser <username> # add user <username>
addgroup <groupname> # add group <groupname>
usermod -a -G <groups_separated_by_commas> <user> # add user to groups

id # shows basic information about a user
passwd # change password

__FILE PERMISSIONS__

ex. ls -la
	drwxr-xr-x 8 root   root   4096 Feb 22 21:16 ..
d/-: directory/file
rwx: read write execute for file owner = first root
r-x: read write execute for group = second root
r-x: read write execute for all

chmod <permissions> <file>
# permissions = 3 digits = [owner][group][all]
0: ---
1: --x
2: -w-
4: r--

3: -wx (2+1)
5: r-x (4+1)
6: rw- (4+2)
7: rwx (4+2+1)

chown <owner>[:<group>] <file> # change file owner (and group)

__SUDO__

sudo -l # list current sudo priviledges
sudo [-u <user>] <cmd> # execute command as root (<user>) [ex. /bin/bash]

su <username> # switch user

__PROCESSES__

ps # shows all the user created processes
ps -ef # shows all system processes
kill <pid> # kill the process with pid <pid>
top # shows top expansive running processes

__ENVIRONMENT_VARIABLES__

$<ENVIRONMENT_VARIABLE> # use the value stored inside the <ENVIRONMENT_VARIABLE>

$USER # current user
$HOME # current user's home
$PATH # contains all the binaries you're able to execute separated by :

export <varname>=<value> # memorize an environment variable

__LINKS__

ln <file1> <file2> # <file2> is an hard link to <file1> -> changes in <file2> are made also in <file1> (<file2> also contain <file1> data)
ln -s <file1> <file2> # <file2> is a symbolic link to <file2> -> <file2> doesn't contain <file1> data but is only a reference. ls shows <file2> -> <file1> with full permissions but it has the same permissions as <file1>

__FIND FILES__

find <directory> # shows all files inside the directory recoursivelly (if I have access permission) -> find / # shows all the files
find <directory> -user <user> # list every file owned by a specific user
find <directory> -group <group> # list every file owned by a specific group
find <directory> 2>/dev/null # remove permission denied messages
find <directory> -perm /4000 # find files with sticky bit
find <directory> -perm -222 -type d # search for writable directories

updatedb # create/update db used by locate
locate <partial/full_file_name> # find all the matching files

__SCRIPTS__

#! /bin/bash <- shabang that specifies to the system which interpreter to use to run a script with ./

__TIPS/TRICKS__

man <cmd> -> /pattern : search pattern inside man
history # check bash history
uname -a # shows os and kernel version

__FILESYSTEM__

/tmp # tipically all permissions for all the users

/etc/passwd # below :500 shows all the users
/etc/shadow # stores all the password hashes
/etc/sudoers # sudoers file

__NETWORK__

ifconfig # ipv4/ipv6 address, mac address, subnetmask, broascast address,...
arp -a # shows ip addresses and mac addresses of the machines that talked to me
netstat -ano # active connections
route # routing table

__SERVICES__

service <service_name> start/stop # after reboot the service is stopped
systemctl enable/disable <service_name> # service running also after reboot




